0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f
undefined
undefined
MethodsProxy {
  contract:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: [Object],
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods: [Circular],
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  abiModel: AbiModel { abi: { methods: [Object], events: [Object] } },
  methodFactory:
   MethodFactory {
     accounts:
      Accounts {
        providersModuleFactory: ProvidersModuleFactory {},
        providerDetector: ProviderDetector {},
        providerResolver: [ProviderResolver],
        givenProvider: null,
        _currentProvider: [WebsocketProvider],
        _defaultAccount: undefined,
        _defaultBlock: 'latest',
        _transactionBlockTimeout: 50,
        _transactionConfirmationBlocks: 24,
        _transactionPollingTimeout: 750,
        _defaultGasPrice: undefined,
        _defaultGas: undefined,
        BatchRequest: [Function],
        methodFactory: [MethodFactory],
        utils: [Object],
        formatters: [Object],
        wallet: [Wallet] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     methodModuleFactory:
      ModuleFactory {
        accounts: [Accounts],
        subscriptionsFactory: [SubscriptionsFactory],
        formatters: [Object],
        utils: [Object] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  methodEncoder:
   MethodEncoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  methodOptionsValidator:
   MethodOptionsValidator {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] } },
  methodOptionsMapper:
   MethodOptionsMapper {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] } },
  PromiEvent: [Function: PromiEvent] }
Starting listner ....
Есть соединение
true
Example app listening on port 3003
0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f
undefined
undefined
undefined
Starting listner ....
Есть соединение
true
Example app listening on port 3003
0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f
undefined
undefined
undefined
Starting listner ....
Есть соединение
true
(node:30705) UnhandledPromiseRejectionWarning: Error: Returned values aren't valid, did it run Out of Gas?
    at AbiCoder.decodeParameters (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-eth-abi/dist/web3-eth-abi.cjs.js:116:15)
    at CallContractMethod.afterExecution (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-eth-contract/dist/web3-eth-contract.cjs.js:720:34)
    at CallContractMethod._callee$ (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-method/dist/web3-core-method.cjs.js:457:39)
    at tryCatch (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at processTicksAndRejections (internal/process/next_tick.js:81:5)
(node:30705) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:30705) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
Example app listening on port 3003
0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f
undefined
undefined
undefined
Starting listner ....
Есть соединение
true
(node:30781) UnhandledPromiseRejectionWarning: Error: Returned values aren't valid, did it run Out of Gas?
    at AbiCoder.decodeParameters (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-eth-abi/dist/web3-eth-abi.cjs.js:116:15)
    at CallContractMethod.afterExecution (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-eth-contract/dist/web3-eth-contract.cjs.js:720:34)
    at CallContractMethod._callee$ (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-method/dist/web3-core-method.cjs.js:457:39)
    at tryCatch (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at processTicksAndRejections (internal/process/next_tick.js:81:5)
(node:30781) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:30781) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
Example app listening on port 3003
Example app listening on port 3003
Example app listening on port 3003
Starting listner ....
Есть соединение
true
Example app listening on port 3003
Starting listner ....
Example app listening on port 3003
Example app listening on port 3003
Promise { undefined }
Example app listening on port 3003
Promise { undefined }
Example app listening on port 3003
Example app listening on port 3003
undefined
Example app listening on port 3003
undefined
undefined
Example app listening on port 3003
undefined
undefined
Example app listening on port 3003
undefined
undefined
Example app listening on port 3003
undefined
EventLogSubscription {
  _events: <[Object: null prototype] {}> {},
  _eventsCount: 0,
  type: 'eth_subscribe',
  method: 'logs',
  options:
   { topics:
      [ '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' ],
     fromBlock: 'latest',
     address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  moduleInstance:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  id: null,
  getPastLogsMethod:
   GetPastLogsMethod {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     promiEvent:
      PromiEvent {
        resolve: [Function],
        reject: [Function],
        promise: [Promise],
        eventEmitter: [EventEmitter] },
     _arguments: { parameters: [] },
     _rpcMethod: 'eth_getLogs',
     _parametersAmount: 1 },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiItemModel:
   AbiItemModel {
     abiItem:
      { anonymous: false,
        inputs: [Array],
        name: 'OfferToSell',
        type: 'event',
        constant: undefined,
        payable: undefined,
        funcName: 'OfferToSell(address,uint256,uint256)',
        signature:
         '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' },
     signature:
      '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a',
     name: 'OfferToSell',
     payable: undefined,
     anonymous: false,
     contractMethodParameters: [] } }
Example app listening on port 3003
log =  undefined
err =  EventLogSubscription {
  _events: <[Object: null prototype] {}> {},
  _eventsCount: 0,
  type: 'eth_subscribe',
  method: 'logs',
  options:
   { topics:
      [ '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' ],
     fromBlock: 'latest',
     address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  moduleInstance:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  id: null,
  getPastLogsMethod:
   GetPastLogsMethod {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     promiEvent:
      PromiEvent {
        resolve: [Function],
        reject: [Function],
        promise: [Promise],
        eventEmitter: [EventEmitter] },
     _arguments: { parameters: [] },
     _rpcMethod: 'eth_getLogs',
     _parametersAmount: 1 },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiItemModel:
   AbiItemModel {
     abiItem:
      { anonymous: false,
        inputs: [Array],
        name: 'OfferToSell',
        type: 'event',
        constant: undefined,
        payable: undefined,
        funcName: 'OfferToSell(address,uint256,uint256)',
        signature:
         '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' },
     signature:
      '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a',
     name: 'OfferToSell',
     payable: undefined,
     anonymous: false,
     contractMethodParameters: [] } }
Example app listening on port 3003
##############################################
EventSubscriptionsProxy {
  contract:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events: [Circular] },
  eventSubscriptionFactory:
   EventSubscriptionFactory {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] } },
  abiModel: AbiModel { abi: { methods: [Object], events: [Object] } },
  eventOptionsMapper:
   EventOptionsMapper {
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     eventFilterEncoder: EventFilterEncoder { abiCoder: [AbiCoder] } },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  allEventsLogDecoder:
   AllEventsLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  allEventsOptionsMapper:
   AllEventsOptionsMapper {
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     allEventsFilterEncoder: AllEventsFilterEncoder { abiCoder: [AbiCoder] } },
  PromiEvent: [Function: PromiEvent] }
##############################################
log =  undefined
err =  EventLogSubscription {
  _events: <[Object: null prototype] {}> {},
  _eventsCount: 0,
  type: 'eth_subscribe',
  method: 'logs',
  options:
   { topics:
      [ '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' ],
     fromBlock: 'latest',
     address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  moduleInstance:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  id: null,
  getPastLogsMethod:
   GetPastLogsMethod {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     promiEvent:
      PromiEvent {
        resolve: [Function],
        reject: [Function],
        promise: [Promise],
        eventEmitter: [EventEmitter] },
     _arguments: { parameters: [] },
     _rpcMethod: 'eth_getLogs',
     _parametersAmount: 1 },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiItemModel:
   AbiItemModel {
     abiItem:
      { anonymous: false,
        inputs: [Array],
        name: 'OfferToSell',
        type: 'event',
        constant: undefined,
        payable: undefined,
        funcName: 'OfferToSell(address,uint256,uint256)',
        signature:
         '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' },
     signature:
      '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a',
     name: 'OfferToSell',
     payable: undefined,
     anonymous: false,
     contractMethodParameters: [] } }
Example app listening on port 3003
##############################################
EventSubscriptionsProxy {
  contract:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events: [Circular] },
  eventSubscriptionFactory:
   EventSubscriptionFactory {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] } },
  abiModel: AbiModel { abi: { methods: [Object], events: [Object] } },
  eventOptionsMapper:
   EventOptionsMapper {
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     eventFilterEncoder: EventFilterEncoder { abiCoder: [AbiCoder] } },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  allEventsLogDecoder:
   AllEventsLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  allEventsOptionsMapper:
   AllEventsOptionsMapper {
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     allEventsFilterEncoder: AllEventsFilterEncoder { abiCoder: [AbiCoder] } },
  PromiEvent: [Function: PromiEvent] }
##############################################
log =  undefined
err =  EventLogSubscription {
  _events: <[Object: null prototype] {}> {},
  _eventsCount: 0,
  type: 'eth_subscribe',
  method: 'logs',
  options:
   { topics:
      [ '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' ],
     fromBlock: 'latest',
     address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  moduleInstance:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  id: null,
  getPastLogsMethod:
   GetPastLogsMethod {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     promiEvent:
      PromiEvent {
        resolve: [Function],
        reject: [Function],
        promise: [Promise],
        eventEmitter: [EventEmitter] },
     _arguments: { parameters: [] },
     _rpcMethod: 'eth_getLogs',
     _parametersAmount: 1 },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiItemModel:
   AbiItemModel {
     abiItem:
      { anonymous: false,
        inputs: [Array],
        name: 'OfferToSell',
        type: 'event',
        constant: undefined,
        payable: undefined,
        funcName: 'OfferToSell(address,uint256,uint256)',
        signature:
         '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' },
     signature:
      '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a',
     name: 'OfferToSell',
     payable: undefined,
     anonymous: false,
     contractMethodParameters: [] } }
Example app listening on port 3003
##############################################
##############################################
log =  undefined
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
Example app listening on port 3003
##############################################
(node:1863) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'jsonInterface' of undefined
    at getEvents (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/server.js:1268:30)
    at processTicksAndRejections (internal/process/next_tick.js:81:5)
(node:1863) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:1863) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
Example app listening on port 3003
##############################################
(node:1948) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'jsonInterface' of undefined
    at getEvents (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/server.js:1268:34)
    at processTicksAndRejections (internal/process/next_tick.js:81:5)
(node:1948) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:1948) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
Example app listening on port 3003
##############################################
Eth {
  providersModuleFactory: ProvidersModuleFactory {},
  providerDetector: ProviderDetector {},
  providerResolver:
   ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
  givenProvider: null,
  _currentProvider:
   WebsocketProvider {
     _events: <[Object: null prototype] {}> { '0': [EE] },
     _eventsCount: 1,
     connection:
      W3CWebSocket {
        _listeners: [Object],
        addEventListener: [Function: _addEventListener],
        removeEventListener: [Function: _removeEventListener],
        dispatchEvent: [Function: _dispatchEvent],
        _url: 'wss://ropsten.infura.io/ws',
        _readyState: 1,
        _protocol: undefined,
        _extensions: [],
        _bufferedAmount: 0,
        _binaryType: 'arraybuffer',
        _connection: [WebSocketConnection],
        _client: [WebSocketClient] },
     timeout: undefined,
     subscriptions: {},
     READY: 'ready',
     CONNECT: 'connect',
     ERROR: 'error',
     CLOSE: 'close',
     SOCKET_MESSAGE: 'socket_message',
     SOCKET_READY: 'socket_ready',
     SOCKET_CLOSE: 'socket_close',
     SOCKET_ERROR: 'socket_error',
     SOCKET_CONNECT: 'socket_connect',
     SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
     SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
     host: 'wss://ropsten.infura.io/ws' },
  _defaultAccount: undefined,
  _defaultBlock: 'latest',
  _transactionBlockTimeout: 50,
  _transactionConfirmationBlocks: 24,
  _transactionPollingTimeout: 750,
  _defaultGasPrice: undefined,
  _defaultGas: undefined,
  BatchRequest: [Function],
  methodFactory:
   MethodFactory {
     methodModuleFactory:
      ModuleFactory {
        accounts: [Accounts],
        subscriptionsFactory: [SubscriptionsFactory],
        formatters: [Object],
        utils: [Object] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     _methods:
      { getNodeInfo: [Function: GetNodeInfoMethod],
        getProtocolVersion: [Function: GetProtocolVersionMethod],
        getCoinbase: [Function: GetCoinbaseMethod],
        isMining: [Function: IsMiningMethod],
        getHashrate: [Function: GetHashrateMethod],
        isSyncing: [Function: IsSyncingMethod],
        getGasPrice: [Function: GetGasPriceMethod],
        getAccounts: [Function: GetAccountsMethod],
        getBlockNumber: [Function: GetBlockNumberMethod],
        getBalance: [Function: GetBalanceMethod],
        getStorageAt: [Function: GetStorageAtMethod],
        getCode: [Function: GetCodeMethod],
        getBlock: [Function: GetBlockMethod],
        getUncle: [Function: GetUncleMethod],
        getBlockTransactionCount: [Function: GetBlockTransactionCountMethod],
        getBlockUncleCount: [Function: GetBlockUncleCountMethod],
        getTransaction: [Function: GetTransactionMethod],
        getTransactionFromBlock: [Function: GetTransactionFromBlockMethod],
        getTransactionReceipt: [Function: GetTransactionReceiptMethod],
        getTransactionCount: [Function: GetTransactionCountMethod],
        sendSignedTransaction: [Function: SendRawTransactionMethod],
        signTransaction: [Function: SignTransactionMethod],
        sendTransaction: [Function: SendTransactionMethod],
        sign: [Function: SignMethod],
        call: [Function: CallMethod],
        estimateGas: [Function: EstimateGasMethod],
        submitWork: [Function: SubmitWorkMethod],
        getWork: [Function: GetWorkMethod],
        getPastLogs: [Function: GetPastLogsMethod],
        requestAccounts: [Function: RequestAccountsMethod] } },
  net:
   Network {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     methodFactory:
      MethodFactory {
        methodModuleFactory: [ModuleFactory],
        utils: [Object],
        formatters: [Object],
        _methods: [Object] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] } },
  accounts:
   Accounts {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     methodFactory:
      MethodFactory {
        methodModuleFactory: [ModuleFactory],
        utils: [Object],
        formatters: [Object],
        _methods: [Object] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     wallet:
      Wallet {
        _accounts: [Circular],
        length: 0,
        defaultKeyName: 'web3js_wallet' } },
  personal:
   Personal {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     methodFactory:
      MethodFactory {
        methodModuleFactory: [ModuleFactory],
        utils: [Object],
        formatters: [Object],
        _methods: [Object] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     net:
      Network {
        providersModuleFactory: ProvidersModuleFactory {},
        providerDetector: ProviderDetector {},
        providerResolver: [ProviderResolver],
        givenProvider: null,
        _currentProvider: [WebsocketProvider],
        _defaultAccount: undefined,
        _defaultBlock: 'latest',
        _transactionBlockTimeout: 50,
        _transactionConfirmationBlocks: 24,
        _transactionPollingTimeout: 750,
        _defaultGasPrice: undefined,
        _defaultGas: undefined,
        BatchRequest: [Function],
        methodFactory: [MethodFactory],
        utils: [Object],
        formatters: [Object] } },
  Iban: [Function: Iban],
  abi:
   AbiCoder {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     ethersAbiCoder: AbiCoder { coerceFunc: [Function] } },
  ens:
   Ens {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 1,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     ensModuleFactory: EnsModuleFactory {},
     promiEvent: [Function: PromiEvent],
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     registryOptions: {},
     net:
      Network {
        providersModuleFactory: ProvidersModuleFactory {},
        providerDetector: ProviderDetector {},
        providerResolver: [ProviderResolver],
        givenProvider: null,
        _currentProvider: [WebsocketProvider],
        _defaultAccount: undefined,
        _defaultBlock: 'latest',
        _transactionBlockTimeout: 50,
        _transactionConfirmationBlocks: 24,
        _transactionPollingTimeout: 750,
        _defaultGasPrice: undefined,
        _defaultGas: undefined,
        BatchRequest: [Function],
        methodFactory: [MethodFactory],
        utils: [Object],
        formatters: [Object] },
     _registry: false },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  subscriptionsFactory:
   SubscriptionsFactory {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] } },
  contractModuleFactory:
   ContractModuleFactory {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     accounts:
      Accounts {
        providersModuleFactory: ProvidersModuleFactory {},
        providerDetector: ProviderDetector {},
        providerResolver: [ProviderResolver],
        givenProvider: null,
        _currentProvider: [WebsocketProvider],
        _defaultAccount: undefined,
        _defaultBlock: 'latest',
        _transactionBlockTimeout: 50,
        _transactionConfirmationBlocks: 24,
        _transactionPollingTimeout: 750,
        _defaultGasPrice: undefined,
        _defaultGas: undefined,
        BatchRequest: [Function],
        methodFactory: [MethodFactory],
        utils: [Object],
        formatters: [Object],
        wallet: [Wallet] },
     methodModuleFactory:
      ModuleFactory {
        accounts: [Accounts],
        subscriptionsFactory: [SubscriptionsFactory],
        formatters: [Object],
        utils: [Object] } },
  initiatedContracts:
   [ AbstractContract {
       providersModuleFactory: ProvidersModuleFactory {},
       providerDetector: ProviderDetector {},
       providerResolver: [ProviderResolver],
       givenProvider: null,
       _currentProvider: [WebsocketProvider],
       _defaultAccount: undefined,
       _defaultBlock: 'latest',
       _transactionBlockTimeout: 50,
       _transactionConfirmationBlocks: 24,
       _transactionPollingTimeout: 750,
       _defaultGasPrice: undefined,
       _defaultGas: undefined,
       BatchRequest: [Function],
       contractModuleFactory: [ContractModuleFactory],
       abiCoder: [AbiCoder],
       utils: [Object],
       formatters: [Object],
       abiMapper: [AbiMapper],
       options: [Object],
       PromiEvent: [Function: PromiEvent],
       methodFactory: [MethodFactory],
       abiModel: [AbiModel],
       methods: [MethodsProxy],
       events: [EventSubscriptionsProxy] } ],
  Contract: [Function] }
##############################################
log =  undefined
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
(node:2413) UnhandledPromiseRejectionWarning: Error: Connection error: Connection is not open on send()
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-providers/dist/web3-providers.cjs.js:487:27
    at new Promise (<anonymous>)
    at WebsocketProvider.sendPayload (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-providers/dist/web3-providers.cjs.js:483:14)
    at WebsocketProvider.send (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-providers/dist/web3-providers.cjs.js:461:19)
    at ListeningMethod._callee$ (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-method/dist/web3-core-method.cjs.js:454:55)
    at tryCatch (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:62:40)
    at Generator.invoke [as _invoke] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:288:22)
    at Generator.prototype.(anonymous function) [as next] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/regenerator-runtime/runtime.js:114:21)
    at asyncGeneratorStep (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:24)
    at _next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/@babel/runtime/helpers/asyncToGenerator.js:25:9)
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/@babel/runtime/helpers/asyncToGenerator.js:32:7
    at new Promise (<anonymous>)
    at ListeningMethod.<anonymous> (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/@babel/runtime/helpers/asyncToGenerator.js:21:12)
    at ListeningMethod.execute (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-method/dist/web3-core-method.cjs.js:477:25)
    at Proxy.anonymousFunction (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-method/dist/web3-core-method.cjs.js:228:25)
    at getStatus (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/server.js:38:39)
(node:2413) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 3)
(node:2413) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
(node:2695) UnhandledPromiseRejectionWarning: Error: Provider error: Subscription with ID null does not exist.
    at WebsocketProvider.unsubscribe (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-providers/dist/web3-providers.cjs.js:289:29)
    at NewHeadsSubscription.unsubscribe (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:73:50)
    at app.get (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/server.js:78:16)
    at Layer.handle [as handle_request] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/layer.js:95:5)
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:335:12)
    at next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:275:10)
    at expressInit (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/middleware/init.js:40:5)
    at Layer.handle [as handle_request] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:317:13)
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:335:12)
    at next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:275:10)
(node:2695) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:2695) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
Есть соединение
true
data:  { parentHash:
   '0xcbd7080fce26987c94e9c6e6b38437a568a0c251d695e92469baa72bbdf09359',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x0Aaf1317b31289ecB455A090C6C16613f652058C',
  stateRoot:
   '0x9ba01cfebc81f0455a1ab0d448d0b1c6f94facb328056d7206992ad36a34586c',
  transactionsRoot:
   '0x901e24daa22eba1b56e00252e9a10cdf555203af234f27ab91b64e8b1f1da932',
  receiptsRoot:
   '0x16ae9fc68fb958928551a96eb2571b204576b23ca710a03693c30a2fcb2ad9b5',
  logsBloom:
   '0x
  difficulty: '779743972',
  number: 5052512,
  gasLimit: 8000000,
  gasUsed: 688406,
  timestamp: 1550606837,
  extraData: '0xd883010816846765746888676f312e31312e35856c696e7578',
  mixHash:
   '0xeee6f6f0b5252bb8d6da64c88503633efb58b5075f13e51354c8f694e430b280',
  nonce: '0x0dc4d7080758de06',
  hash:
   '0x579813735cd987ba1d04adb719e97eb00197852353933b54fda4ca3cd4fd5c95',
  size: undefined }
data:  { parentHash:
   '0x579813735cd987ba1d04adb719e97eb00197852353933b54fda4ca3cd4fd5c95',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x635B4764D1939DfAcD3a8014726159abC277BecC',
  stateRoot:
   '0x7d8b81dd9e03128b6948c5ac8b593b7e1d4f88062fac59791d572a16a38923b4',
  transactionsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  receiptsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  logsBloom:
   '0x
  difficulty: '779363238',
  number: 5052513,
  gasLimit: 8000029,
  gasUsed: 0,
  timestamp: 1550606857,
  extraData:
   '0xde830202098f5061726974792d457468657265756d86312e33322e30826c69',
  mixHash:
   '0x7087b0c011f3dc077a84508d9224a876be0b37976f770dfeb47f881860df545f',
  nonce: '0xa40126443ab14f38',
  hash:
   '0xba33dde30b13ef867e87f54f64b1716b177dbbb1eef5d22bbcb323d3acf846a5',
  size: undefined }
data:  { parentHash:
   '0xba33dde30b13ef867e87f54f64b1716b177dbbb1eef5d22bbcb323d3acf846a5',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x2621ea417659Ad69bAE66af05ebE5788E533E5e7',
  stateRoot:
   '0x2ab7a5e3feaf1714e21da886cffe67ca207d76be5243e363e58620021098edb2',
  transactionsRoot:
   '0x20ccb22b1f55be8b752100a5f7276d502a26542d9829ac430ac3b3afe639c8f1',
  receiptsRoot:
   '0x14de908ca493f6be82d7afe4111bd4d7c745026bdd3b02b84f28e3969c44ffeb',
  logsBloom:
   '0x00000000004000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000200000000000000000000001000000000000000000000000800000000000000200000000000000000100000001000000000000000000000020000000000000000002000000000000100000004400001000000000000000000000000000000000000000000000000000020020800400000000000000000000000000000000000000000000000000004000000000000000000406000000100000000000000004000000044000000000000000000000000000000000000000000000000',
  difficulty: '779363238',
  number: 5052514,
  gasLimit: 8000000,
  gasUsed: 3527712,
  timestamp: 1550606872,
  extraData: '0xda83010816846765746888676f312e31312e358777696e646f7773',
  mixHash:
   '0x365dda25567a4c4f02fe2024574ac24f8f44de2207c9786986d0bfe7eccc270a',
  nonce: '0xdc3c789d413642b9',
  hash:
   '0x427fc66b91e10f032c161a178298221d21d18563ccf158837b8c7475cc043041',
  size: undefined }
data:  { parentHash:
   '0x427fc66b91e10f032c161a178298221d21d18563ccf158837b8c7475cc043041',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x0Aaf1317b31289ecB455A090C6C16613f652058C',
  stateRoot:
   '0x8c149a8dcd81b966ec6b78e3ddbf6f6c9ace0fda8a6db45b333999ffa732f148',
  transactionsRoot:
   '0x2dbbf62e26bcd73643d43d89a490df052941ecf35f5da69c1ddd17fc8ca7086e',
  receiptsRoot:
   '0x056b23fbba480696b65fe5a59b8f2148a1299103c4f57df839233af2cf4ca2d2',
  logsBloom:
   '0x
  difficulty: '779743786',
  number: 5052515,
  gasLimit: 8000000,
  gasUsed: 21000,
  timestamp: 1550606875,
  extraData: '0xd883010816846765746888676f312e31312e35856c696e7578',
  mixHash:
   '0xf0a53d3d8964b6020f963c8dff8ba3d7fb9cd659d791a3ebb6646800ba8f880a',
  nonce: '0xb5eed10c00114538',
  hash:
   '0xf9cce6adc8bc23a2db2224f593b42f52a5b1cd7509abaf673bcd54e2a3928388',
  size: undefined }
data:  { parentHash:
   '0xf9cce6adc8bc23a2db2224f593b42f52a5b1cd7509abaf673bcd54e2a3928388',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x635B4764D1939DfAcD3a8014726159abC277BecC',
  stateRoot:
   '0xab493ee3f742209197b7efa996ad3065fc7ea25beb1dd35fb1a58f69750c4bf9',
  transactionsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  receiptsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  logsBloom:
   '0x
  difficulty: '780124520',
  number: 5052516,
  gasLimit: 8000029,
  gasUsed: 0,
  timestamp: 1550606877,
  extraData:
   '0xde830202098f5061726974792d457468657265756d86312e33322e30826c69',
  mixHash:
   '0x78472863ee8ab3860c0d88dbdc1a178b47c6bd09844264628c7c349c622c28be',
  nonce: '0xa40126443af92efb',
  hash:
   '0xd6eb017faf6a94aa156dd1593220d37b23dabb56eda5379b28d884cb7f8c3fed',
  size: undefined }
data:  { parentHash:
   '0xd6eb017faf6a94aa156dd1593220d37b23dabb56eda5379b28d884cb7f8c3fed',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0xB17fC44dD79D21Cd7F4D8c9686c98aE9039b3909',
  stateRoot:
   '0x10c62eecd3b4fabe8c1a1b1f6288c0140569024ec657e66bc67abdf8241bf54b',
  transactionsRoot:
   '0x0ce4e5451e507198778968d3d9007545d717b49716d48ed866d8d6f838f5ce50',
  receiptsRoot:
   '0x4900c7ec5cfe623ad535df04d27f2a6ba9b4955d74ed633a889eb090f7ab2b50',
  logsBloom:
   '0x
  difficulty: '780124520',
  number: 5052517,
  gasLimit: 8000029,
  gasUsed: 1108815,
  timestamp: 1550606892,
  extraData:
   '0xde830203018f5061726974792d457468657265756d86312e33312e31826c69',
  mixHash:
   '0xa432be558f753c99bf57c362375031ef1d02a2f006e5acd49ab024145fc100cc',
  nonce: '0x2bb183a1613d2d7c',
  hash:
   '0x99ea08e5530da1967be0fce98334beb9bdd17bd401c0cd03da03a30d7972a2a9',
  size: undefined }
data:  { parentHash:
   '0x99ea08e5530da1967be0fce98334beb9bdd17bd401c0cd03da03a30d7972a2a9',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x635B4764D1939DfAcD3a8014726159abC277BecC',
  stateRoot:
   '0xcb8867c90dd3d57de8a525e5cfe3e63fc1eb290655ed35acfd79eabc08a82cdc',
  transactionsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  receiptsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  logsBloom:
   '0x
  difficulty: '780124520',
  number: 5052518,
  gasLimit: 8000029,
  gasUsed: 0,
  timestamp: 1550606904,
  extraData:
   '0xde830202098f5061726974792d457468657265756d86312e33322e30826c69',
  mixHash:
   '0xa7d5b9eed90c5ee13a021098e76e1790abf8235654be57b0d194dfe7c8657c83',
  nonce: '0xa40126443717fd14',
  hash:
   '0xffb024c64a305fb62e9967d8f46769b2853b6a4b0ae554064465b8f44cf2ed73',
  size: undefined }
data:  { parentHash:
   '0xffb024c64a305fb62e9967d8f46769b2853b6a4b0ae554064465b8f44cf2ed73',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x635B4764D1939DfAcD3a8014726159abC277BecC',
  stateRoot:
   '0x8d46d488dc05edeb46ba2a6021ecfffb9a5f9f4888ec87aa0619c3197509139b',
  transactionsRoot:
   '0xdf9b252bae12b33e70c763e4563fed1ea5b38f2e3cc6cc32412ca30f63ac3137',
  receiptsRoot:
   '0xdd89df3fbef624f2d3e3d2a8fefc85c0d90bac1f2985124676376d841187ff4f',
  logsBloom:
   '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000002000400000000000000000000000000000000000000000000000000000000000000000000000004000000000000080000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000100000000000000000000',
  difficulty: '780124520',
  number: 5052519,
  gasLimit: 8000029,
  gasUsed: 122633,
  timestamp: 1550606914,
  extraData:
   '0xde830202098f5061726974792d457468657265756d86312e33322e30826c69',
  mixHash:
   '0xc168cc229413e36fb05b661cf06166948df3fa12c5c6562a92a1b487a7539ae9',
  nonce: '0xa401264435adc3bb',
  hash:
   '0xf369021d3ba79e83fdb2ffe71f646f2a2cf0de8d112e52d0fb5995ca2de53efb',
  size: undefined }
data:  { parentHash:
   '0xf369021d3ba79e83fdb2ffe71f646f2a2cf0de8d112e52d0fb5995ca2de53efb',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0xB17fC44dD79D21Cd7F4D8c9686c98aE9039b3909',
  stateRoot:
   '0x5b1dc97bc8aa8029229f8eed21218e5c7601af60be93d0c78d2c4aec14db6b4c',
  transactionsRoot:
   '0x648eb5d76b512a952891d2a27185e4462c22223c6e83bc570f8056db65282d15',
  receiptsRoot:
   '0xb0eb08bfd682b336b6014328386172cb6eed8c3d58b4af456457ef807b89a2fb',
  logsBloom:
   '0x
  difficulty: '780505440',
  number: 5052520,
  gasLimit: 8000029,
  gasUsed: 690968,
  timestamp: 1550606922,
  extraData:
   '0xde830203018f5061726974792d457468657265756d86312e33312e31826c69',
  mixHash:
   '0xd3a7a326f85900140ee45ea3f01fb1c7382cac885942e159dd8419049a424039',
  nonce: '0x2bb183a17a103ee5',
  hash:
   '0xbb045c34bcd83141241f3919b7f3db9b7f9d7088dbab94ceb847a09cef77646d',
  size: undefined }
data:  { parentHash:
   '0xbb045c34bcd83141241f3919b7f3db9b7f9d7088dbab94ceb847a09cef77646d',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x635B4764D1939DfAcD3a8014726159abC277BecC',
  stateRoot:
   '0x7a5f8305212356a731721802b730ad110981c73641f3217bdef045f83d75bdd2',
  transactionsRoot:
   '0x9ee243d044563963e4a678f155179cb0d5c9be149a67a005623036e8efa2a8f7',
  receiptsRoot:
   '0x5c41b8d0cdaf3b279338c0906292e4346824613b34daca447a64d509c1a73d69',
  logsBloom:
   '0x
  difficulty: '779743228',
  number: 5052521,
  gasLimit: 8000029,
  gasUsed: 609233,
  timestamp: 1550606954,
  extraData:
   '0xde830202098f5061726974792d457468657265756d86312e33322e30826c69',
  mixHash:
   '0x8c608b3dab70a05b6145491f3d96ee5ec4063910ef934646a4fc278f3a618e6c',
  nonce: '0xa4012644365c1330',
  hash:
   '0x74093bbe4591f2ac5bed377d0935455d39ff312cd96f69fb77c5baff931f1ab6',
  size: undefined }
data:  { parentHash:
   '0x74093bbe4591f2ac5bed377d0935455d39ff312cd96f69fb77c5baff931f1ab6',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x2621ea417659Ad69bAE66af05ebE5788E533E5e7',
  stateRoot:
   '0x3aefcb4f7cf8381787c4f4ed599bf460bca197a46e95f0f2128c9d3efc46c160',
  transactionsRoot:
   '0xba98c50d311ab5b770019cec997ba6387ff2c261087b760ad2fbebb9841e8a90',
  receiptsRoot:
   '0xbee1bd7bdd460f3da6a3be894d88769fd46ba4dbc1188a190438b663612b5b68',
  logsBloom:
   '0x
  difficulty: '779743228',
  number: 5052522,
  gasLimit: 8000000,
  gasUsed: 1339613,
  timestamp: 1550606964,
  extraData: '0xda83010816846765746888676f312e31312e358777696e646f7773',
  mixHash:
   '0xeb349456e2c089c6b8b2a8addcb26681a0f39605d6e28408d7c6cdb9d7c21fb0',
  nonce: '0xdc3c789d404491b7',
  hash:
   '0x851e376b472a85de6bafa01edcb258d7dbb91510e048781409c0799927b2958e',
  size: undefined }
data:  { parentHash:
   '0x851e376b472a85de6bafa01edcb258d7dbb91510e048781409c0799927b2958e',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0xB17fC44dD79D21Cd7F4D8c9686c98aE9039b3909',
  stateRoot:
   '0x6ddfe3d834eb808238c7e6645548efe73576ab769d84acbbd90874eec6a997d5',
  transactionsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  receiptsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  logsBloom:
   '0x
  difficulty: '779743228',
  number: 5052523,
  gasLimit: 8000029,
  gasUsed: 0,
  timestamp: 1550606976,
  extraData:
   '0xde830203018f5061726974792d457468657265756d86312e33312e31826c69',
  mixHash:
   '0xeda2191aca5c57a19b47b81f736fff233ef52b76319268312940257eab376632',
  nonce: '0x2bb183a16fd63ec6',
  hash:
   '0x841b18fc05273656a85edebdea1e7665ae0d96ed6d2bd772e2cf0bd26024f99d',
  size: undefined }
data:  { parentHash:
   '0x841b18fc05273656a85edebdea1e7665ae0d96ed6d2bd772e2cf0bd26024f99d',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0xB17fC44dD79D21Cd7F4D8c9686c98aE9039b3909',
  stateRoot:
   '0x355d6a93899e1c7f8bd88b66e26e249e96ee1e5b1fe5e95e1846edeeb080d6c2',
  transactionsRoot:
   '0x678d8be4b52939755befdd86024a2f8b04302c56bd025d92d034df10e6830725',
  receiptsRoot:
   '0xb40424b8133d7b40f0aa7eb889f65c5e370ae19cabd49ae5ca3eb9ea90b4ad69',
  logsBloom:
   '0x
  difficulty: '779362495',
  number: 5052524,
  gasLimit: 8000029,
  gasUsed: 910176,
  timestamp: 1550607000,
  extraData:
   '0xde830203018f5061726974792d457468657265756d86312e33312e31826c69',
  mixHash:
   '0x1cc2e8d4fa8406a93b3bd7933befa7cec6e90aec8a37488d4a6a2cfb90af1b55',
  nonce: '0x2bb183a166a29e90',
  hash:
   '0xc69a15b5550a3bab129d47afd57c708b0720bc66b98c5d0bb820f64c12250cbb',
  size: undefined }
data:  { parentHash:
   '0xc69a15b5550a3bab129d47afd57c708b0720bc66b98c5d0bb820f64c12250cbb',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0xB17fC44dD79D21Cd7F4D8c9686c98aE9039b3909',
  stateRoot:
   '0x7fefbd444103d279fb09799cba8d7df359e3f8642952dd746be7cb588c021b90',
  transactionsRoot:
   '0xf56c92ec535386f8e902ec2fc536b89ee6f539b78bdee07c15c7d12d49c8486a',
  receiptsRoot:
   '0x8d211d5e64b21b5edce22d578deca9270bff28c5bfaa7c538e49de2339e8ec67',
  logsBloom:
   '0x00000000000000000000000000000000000000000000000000000000000000000000010000000000400000000000000080000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000008010000000000000003000000000000000000000000000000000000000000000001000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000201000000000000000000000000000000000000000000000000a00000000000000000002000000000000000001000000000000000020000000000000000000800000000000',
  difficulty: '779362495',
  number: 5052525,
  gasLimit: 8000029,
  gasUsed: 768256,
  timestamp: 1550607015,
  extraData:
   '0xde830203018f5061726974792d457468657265756d86312e33312e31826c69',
  mixHash:
   '0x7720a9810026d60d0d241e7dd448c04c2e215ceeee5ce7d957bb1099882d88dc',
  nonce: '0x2bb183a169797223',
  hash:
   '0xbcb0a1d0cc908757595ca7a7ec91e7be10d5537a235627358ee67c3b61bc54e2',
  size: undefined }
data:  { parentHash:
   '0xbcb0a1d0cc908757595ca7a7ec91e7be10d5537a235627358ee67c3b61bc54e2',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x0Aaf1317b31289ecB455A090C6C16613f652058C',
  stateRoot:
   '0x65b3bcaab79608e94517dd8df4b83e7d70943a1d107f35aed14ffbe8c8c94e33',
  transactionsRoot:
   '0x9570c5ec499672b8edc1b02c5effb80c1ab808a877ab02d17fcfbeb3e845cb47',
  receiptsRoot:
   '0x0d676f98d4b1e8b13612987e2e633865e425eb2f782d8b118a6453e19dec5261',
  logsBloom:
   '0x
  difficulty: '778981947',
  number: 5052526,
  gasLimit: 8000000,
  gasUsed: 491505,
  timestamp: 1550607034,
  extraData: '0xd883010816846765746888676f312e31312e35856c696e7578',
  mixHash:
   '0x6f123f57463ba4eb0c4e023e4fc8f660918e9a6d86c5c0258036638de5f3187c',
  nonce: '0x42c64868034a4694',
  hash:
   '0x647b1ca3243466bd243e89a766348aa85529d6dcc8198d6ece1dd25a95cf93c3',
  size: undefined }
data:  { parentHash:
   '0x647b1ca3243466bd243e89a766348aa85529d6dcc8198d6ece1dd25a95cf93c3',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0xB17fC44dD79D21Cd7F4D8c9686c98aE9039b3909',
  stateRoot:
   '0x8ba78ae726ce7de67ceaae1afd55c1aa60275c57a242b1b869f94d28c944ed50',
  transactionsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  receiptsRoot:
   '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  logsBloom:
   '0x
  difficulty: '779362309',
  number: 5052527,
  gasLimit: 8000029,
  gasUsed: 0,
  timestamp: 1550607040,
  extraData:
   '0xde830203018f5061726974792d457468657265756d86312e33312e31826c69',
  mixHash:
   '0x60c01c0de635434a74eef965f38e51af077d5659bc974c71569f04f9d9a62cf9',
  nonce: '0x2bb183a1565585fe',
  hash:
   '0x8b405b3df44cf21a6eae682069c204bff9b9b982b5025a345a77c02cca3b67d4',
  size: undefined }
data:  { parentHash:
   '0x8b405b3df44cf21a6eae682069c204bff9b9b982b5025a345a77c02cca3b67d4',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0xB17fC44dD79D21Cd7F4D8c9686c98aE9039b3909',
  stateRoot:
   '0x53860604cd3e227a9b09e89f322fd466e67b5c4336a4d0f2f681297fb508eb58',
  transactionsRoot:
   '0x49b727c51ef5bb12841e7ff341031edefd49e6da230c9fadf98daae3fff8c45b',
  receiptsRoot:
   '0xd649df2b4588e8d156fc6c39774eb4aed7a41a206b51cbc0055d6dbedf80400c',
  logsBloom:
   '0x
  difficulty: '779742857',
  number: 5052528,
  gasLimit: 8000029,
  gasUsed: 650582,
  timestamp: 1550607042,
  extraData:
   '0xde830203018f5061726974792d457468657265756d86312e33312e31826c69',
  mixHash:
   '0x72ac865733aef82dcae9aaf629b17a7885d9718e6c9c17d5f689c6465380b926',
  nonce: '0x2bb183a15d422c1b',
  hash:
   '0x5cd0e84b75384f65db26d9fa6f8530eb8fc290f0b61a0b03ccfc4096aa53c8d6',
  size: undefined }
data:  { parentHash:
   '0x5cd0e84b75384f65db26d9fa6f8530eb8fc290f0b61a0b03ccfc4096aa53c8d6',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0xB17fC44dD79D21Cd7F4D8c9686c98aE9039b3909',
  stateRoot:
   '0x36df542e8f87d66505412094936edb026b45aed670d15f9515263de038c54866',
  transactionsRoot:
   '0xd4cf518a70c6dd3d10db4bb392792426a219d11e1168ab68955a6ec38d88066c',
  receiptsRoot:
   '0x8f6805380cbc4461eb6481e88d9f1bfbbb5e5ceeb9007c0fbb77abac6a8da377',
  logsBloom:
   '0x
  difficulty: '780123590',
  number: 5052529,
  gasLimit: 8000029,
  gasUsed: 561404,
  timestamp: 1550607050,
  extraData:
   '0xde830203018f5061726974792d457468657265756d86312e33312e31826c69',
  mixHash:
   '0x82ffc27e4de0dc3130d9cb2e9cea870a4234bfdbd5292bff83681885b49ce2d3',
  nonce: '0x2bb183a15a8991db',
  hash:
   '0x57c85f3cbed98138068c211aa7a02d6bfa8b40784014f2d73aa2b72808f587c0',
  size: undefined }
data:  { parentHash:
   '0x57c85f3cbed98138068c211aa7a02d6bfa8b40784014f2d73aa2b72808f587c0',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x2621ea417659Ad69bAE66af05ebE5788E533E5e7',
  stateRoot:
   '0xc2ba30ff5d5a9106ee4b62a5beb9efc3a7ddd53e77565c764abb3ecbc959c978',
  transactionsRoot:
   '0x7d0c62ff8c39d465e43a2fbecb380878dea85e15fa634d9dd1ff77f3b6dd5c06',
  receiptsRoot:
   '0xdd530bf2dacaeb0f84e723b0dca94f0d6904fde632092821826a9a5194477447',
  logsBloom:
   '0x
  difficulty: '780504509',
  number: 5052530,
  gasLimit: 8000000,
  gasUsed: 1071829,
  timestamp: 1550607057,
  extraData: '0xda83010816846765746888676f312e31312e358777696e646f7773',
  mixHash:
   '0x556d08763feb16617dc81a735385d719fd24dccdfca701c9a1757af7ca31327f',
  nonce: '0xdc3c789d3ff02d23',
  hash:
   '0xb89778b9dc467689d952a94f252beddedf3183df88013f8f8dc92dd85d36fd23',
  size: undefined }
data:  { parentHash:
   '0xb89778b9dc467689d952a94f252beddedf3183df88013f8f8dc92dd85d36fd23',
  sha3Uncles:
   '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  miner: '0x635B4764D1939DfAcD3a8014726159abC277BecC',
  stateRoot:
   '0x9145c5b9c6206273c420600a885c774092364ee93908198b397fcd9b93de4c07',
  transactionsRoot:
   '0x9cfa30214340e8897e59a5313c1b5839e180a767b08f0086acb8d5a62e8dac0e',
  receiptsRoot:
   '0x625ef207a6a20850d0cdc22319578eba0f62cf067a7c23ced96bc67cfab651fe',
  logsBloom:
   '0x00000000000000010000000000000008000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000010000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
  difficulty: '780504509',
  number: 5052531,
  gasLimit: 8000029,
  gasUsed: 58643,
  timestamp: 1550607074,
  extraData:
   '0xde830202098f5061726974792d457468657265756d86312e33322e30826c69',
  mixHash:
   '0x5314f61e2409c5de6d94ea8510f1af69f83ac83c2bc36c5d7463d116a7a79330',
  nonce: '0xa40127444414f125',
  hash:
   '0x9875ee63ef7a791e79525f90af22411c3a4760a66ac0da14bca651f61f51654e',
  size: undefined }
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
Error: Unknown subscription: OfferToSell
    at Proxy.subscribe (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-eth/dist/web3-eth.cjs.js:116:17)
    at app.get (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/server.js:69:32)
    at Layer.handle [as handle_request] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/layer.js:95:5)
    at next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/route.js:137:13)
    at Route.dispatch (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/route.js:112:3)
    at Layer.handle [as handle_request] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/layer.js:95:5)
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:281:22
    at Function.process_params (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:335:12)
    at next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:275:10)
    at expressInit (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/middleware/init.js:40:5)
    at Layer.handle [as handle_request] (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/layer.js:95:5)
    at trim_prefix (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:317:13)
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:284:7
    at Function.process_params (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:335:12)
    at next (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/router/index.js:275:10)
    at query (/home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/express/lib/middleware/query.js:45:5)
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
log =  undefined
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
====================================================
log =  undefined
err =  EventLogSubscription {
  _events: <[Object: null prototype] {}> {},
  _eventsCount: 0,
  type: 'eth_subscribe',
  method: 'logs',
  options:
   { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f',
     topics:
      [ '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' ],
     fromBlock: 'latest' },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  moduleInstance:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 2,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  id: null,
  getPastLogsMethod:
   GetPastLogsMethod {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     promiEvent:
      PromiEvent {
        resolve: [Function],
        reject: [Function],
        promise: [Promise],
        eventEmitter: [EventEmitter] },
     _arguments: { parameters: [] },
     _rpcMethod: 'eth_getLogs',
     _parametersAmount: 1 },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiItemModel:
   AbiItemModel {
     abiItem:
      { anonymous: false,
        inputs: [Array],
        name: 'OfferToSell',
        type: 'event',
        constant: undefined,
        payable: undefined,
        funcName: 'OfferToSell(address,uint256,uint256)',
        signature:
         '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' },
     signature:
      '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a',
     name: 'OfferToSell',
     payable: undefined,
     anonymous: false,
     contractMethodParameters: [] } }
====================================================
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
====================================================
log =  undefined
====================================================
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
====================================================
log =  undefined
====================================================
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
====================================================
log =  undefined
err =  undefined
====================================================
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
====================================================
log =  undefined
err =  undefined
====================================================
Есть соединение
true
##############################################
undefined
##############################################
====================================================
log =  undefined
err =  undefined
====================================================
Есть соединение
true
##############################################
undefined
##############################################
====================================================
log =  undefined
err =  undefined
====================================================
Есть соединение
true
Example app listening on port 3003
##############################################
undefined
##############################################
====================================================
log =  undefined
err =  EventLogSubscription {
  _events: <[Object: null prototype] {}> {},
  _eventsCount: 0,
  type: 'eth_subscribe',
  method: 'logs',
  options:
   { filter: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     fromBlock: '0x0',
     toBlock: 'latest',
     topics:
      [ '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' ],
     address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  moduleInstance:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 3,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  id: null,
  getPastLogsMethod:
   GetPastLogsMethod {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     promiEvent:
      PromiEvent {
        resolve: [Function],
        reject: [Function],
        promise: [Promise],
        eventEmitter: [EventEmitter] },
     _arguments: { parameters: [Array] },
     _rpcMethod: 'eth_getLogs',
     _parametersAmount: 1 },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiItemModel:
   AbiItemModel {
     abiItem:
      { anonymous: false,
        inputs: [Array],
        name: 'OfferToSell',
        type: 'event',
        constant: undefined,
        payable: undefined,
        funcName: 'OfferToSell(address,uint256,uint256)',
        signature:
         '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' },
     signature:
      '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a',
     name: 'OfferToSell',
     payable: undefined,
     anonymous: false,
     contractMethodParameters: [] } }
====================================================
Есть соединение
true
(node:4579) UnhandledPromiseRejectionWarning: TypeError: callback is not a function
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:119:11
    at processTicksAndRejections (internal/process/next_tick.js:81:5)
(node:4579) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:4579) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
##############################################
undefined
##############################################
====================================================
log =  undefined
err =  EventLogSubscription {
  _events: <[Object: null prototype] {}> {},
  _eventsCount: 0,
  type: 'eth_subscribe',
  method: 'logs',
  options:
   { filter: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     fromBlock: '0x0',
     toBlock: 'latest',
     topics:
      [ '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' ],
     address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  moduleInstance:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 4,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: [Object],
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  id: null,
  getPastLogsMethod:
   GetPastLogsMethod {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     promiEvent:
      PromiEvent {
        resolve: [Function],
        reject: [Function],
        promise: [Promise],
        eventEmitter: [EventEmitter] },
     _arguments: { parameters: [Array] },
     _rpcMethod: 'eth_getLogs',
     _parametersAmount: 1 },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiItemModel:
   AbiItemModel {
     abiItem:
      { anonymous: false,
        inputs: [Array],
        name: 'OfferToSell',
        type: 'event',
        constant: undefined,
        payable: undefined,
        funcName: 'OfferToSell(address,uint256,uint256)',
        signature:
         '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' },
     signature:
      '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a',
     name: 'OfferToSell',
     payable: undefined,
     anonymous: false,
     contractMethodParameters: [] } }
====================================================
Есть соединение
true
(node:4579) UnhandledPromiseRejectionWarning: TypeError: callback is not a function
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:119:11
    at processTicksAndRejections (internal/process/next_tick.js:81:5)
(node:4579) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
Example app listening on port 3003
##############################################
undefined
##############################################
====================================================
log =  undefined
err =  EventLogSubscription {
  _events: <[Object: null prototype] {}> {},
  _eventsCount: 0,
  type: 'eth_subscribe',
  method: 'logs',
  options:
   { filter: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     fromBlock: '0x0',
     toBlock: 'latest',
     topics:
      [ '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' ],
     address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
  utils:
   { randomHex: [Function: randomHex],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     hexToAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     getUnitValue: [Function: getUnitValue],
     fromWei: [Function: fromWei],
     toWei: [Function: toWei],
     toChecksumAddress: [Function: toChecksumAddress],
     keccak256: { [Function: sha3] _Hash: [Object] },
     sha3: { [Function: sha3] _Hash: [Object] },
     toDecimal: [Function: hexToNumber],
     hexToNumber: [Function: hexToNumber],
     fromDecimal: [Function: numberToHex],
     numberToHex: [Function: numberToHex],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     utf8ToHex: [Function: utf8ToHex],
     toAscii: [Function: hexToAscii],
     fromAscii: [Function: asciiToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     getSignatureParameters: [Function: getSignatureParameters],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toBN: [Function: toBN],
     toHex: [Function: toHex],
     hexToNumberString: [Function: hexToNumberString],
     toTwosComplement: [Function: toTwosComplement],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isBloom: [Function: isBloom],
     isTopic: [Function: isTopic],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     soliditySha3: [Function: soliditySha3] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  moduleInstance:
   AbstractContract {
     providersModuleFactory: ProvidersModuleFactory {},
     providerDetector: ProviderDetector {},
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      WebsocketProvider {
        _events: [<[Object: null prototype] {}>],
        _eventsCount: 3,
        connection: [W3CWebSocket],
        timeout: undefined,
        subscriptions: {},
        READY: 'ready',
        CONNECT: 'connect',
        ERROR: 'error',
        CLOSE: 'close',
        SOCKET_MESSAGE: 'socket_message',
        SOCKET_READY: 'socket_ready',
        SOCKET_CLOSE: 'socket_close',
        SOCKET_ERROR: 'socket_error',
        SOCKET_CONNECT: 'socket_connect',
        SOCKET_NETWORK_CHANGED: 'socket_networkChanged',
        SOCKET_ACCOUNTS_CHANGED: 'socket_accountsChanged',
        host: 'wss://ropsten.infura.io/ws' },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     contractModuleFactory:
      ContractModuleFactory {
        utils: [Object],
        formatters: [Object],
        abiCoder: [AbiCoder],
        accounts: [Accounts],
        methodModuleFactory: [ModuleFactory] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiMapper:
      AbiMapper {
        utils: [Object],
        abiCoder: [AbiCoder],
        contractModuleFactory: [ContractModuleFactory] },
     options: { address: '0xfcbb10fbc7c0a6ef80abc6bd674ae0254fe3972f' },
     PromiEvent: [Function: PromiEvent],
     methodFactory:
      MethodFactory {
        accounts: [Accounts],
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        methodModuleFactory: [ModuleFactory],
        abiCoder: [AbiCoder] },
     abiModel: AbiModel { abi: [Object] },
     methods:
      MethodsProxy {
        contract: [Circular],
        abiModel: [AbiModel],
        methodFactory: [MethodFactory],
        methodEncoder: [MethodEncoder],
        methodOptionsValidator: [MethodOptionsValidator],
        methodOptionsMapper: [MethodOptionsMapper],
        PromiEvent: [Function: PromiEvent] },
     events:
      EventSubscriptionsProxy {
        contract: [Circular],
        eventSubscriptionFactory: [EventSubscriptionFactory],
        abiModel: [AbiModel],
        eventOptionsMapper: [EventOptionsMapper],
        eventLogDecoder: [EventLogDecoder],
        allEventsLogDecoder: [AllEventsLogDecoder],
        allEventsOptionsMapper: [AllEventsOptionsMapper],
        PromiEvent: [Function: PromiEvent] } },
  id: null,
  getPastLogsMethod:
   GetPastLogsMethod {
     utils:
      { randomHex: [Function: randomHex],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        hexToAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        getUnitValue: [Function: getUnitValue],
        fromWei: [Function: fromWei],
        toWei: [Function: toWei],
        toChecksumAddress: [Function: toChecksumAddress],
        keccak256: [Function],
        sha3: [Function],
        toDecimal: [Function: hexToNumber],
        hexToNumber: [Function: hexToNumber],
        fromDecimal: [Function: numberToHex],
        numberToHex: [Function: numberToHex],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        utf8ToHex: [Function: utf8ToHex],
        toAscii: [Function: hexToAscii],
        fromAscii: [Function: asciiToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        getSignatureParameters: [Function: getSignatureParameters],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toBN: [Function: toBN],
        toHex: [Function: toHex],
        hexToNumberString: [Function: hexToNumberString],
        toTwosComplement: [Function: toTwosComplement],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isBloom: [Function: isBloom],
        isTopic: [Function: isTopic],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        soliditySha3: [Function: soliditySha3] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     promiEvent:
      PromiEvent {
        resolve: [Function],
        reject: [Function],
        promise: [Promise],
        eventEmitter: [EventEmitter] },
     _arguments: { parameters: [Array] },
     _rpcMethod: 'eth_getLogs',
     _parametersAmount: 1 },
  eventLogDecoder:
   EventLogDecoder {
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiItemModel:
   AbiItemModel {
     abiItem:
      { anonymous: false,
        inputs: [Array],
        name: 'OfferToSell',
        type: 'event',
        constant: undefined,
        payable: undefined,
        funcName: 'OfferToSell(address,uint256,uint256)',
        signature:
         '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a' },
     signature:
      '0xb1795e6a387ccb9b4b53a6c5198236dcfead4ff0a4fe07428a151231ea12003a',
     name: 'OfferToSell',
     payable: undefined,
     anonymous: false,
     contractMethodParameters: [] } }
====================================================
Есть соединение
true
(node:4664) UnhandledPromiseRejectionWarning: TypeError: callback is not a function
    at /home/vk78/6040/AngularMaterialKrasikovGithub/kop640serverTmp/node_modules/web3-core-subscriptions/dist/web3-core-subscriptions.cjs.js:119:11
    at processTicksAndRejections (internal/process/next_tick.js:81:5)
(node:4664) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:4664) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
